
using FastGaussQuadrature
using Polynomials


function getCoefficientsGLRK1()
    a = 0.5*ones(Float64, 1, 1)
    b = [1.0]
    c = [0.5]
    o = 2

    CoefficientsRK(:glrk1, o, a, b, c)
end

function getCoefficientsGLRK2()
    a = [[1/4       1/4-√3/6]
         [1/4+√3/6  1/4     ]]
    b =  [1/2,      1/2     ]
    c =  [1/2-√3/6, 1/2+√3/6]
    o = 4

    CoefficientsRK(:glrk2, o, a, b, c)
end

function getCoefficientsGLRK3()
    a = [[5/36         2/9-√15/15  5/36-√15/30]
         [5/36+√15/24  2/9         5/36-√15/24]
         [5/36+√15/30  2/9+√15/15  5/36       ]]
    b =  [5/18,        4/9,        5/18       ]
    c =  [1/2-√15/10,  1/2,        1/2+√15/10 ]
    o = 6

    CoefficientsRK(:glrk3, o, a, b, c)
end

function getCoefficientsGLRK4()
    a = [[0.08696371128436346  -0.02660418008499879   0.01262746268940472  -0.003555149685795683]
         [0.18811811749986810   0.16303628871563650  -0.02788042860247090   0.006735500594538156]
         [0.16719192197418880   0.35395300603374400   0.16303628871563650  -0.01419069493114114]
         [0.17748257225452260   0.31344511474186830   0.35267675751627190   0.08696371128436346]]
    b =  [0.17392742256872690,  0.32607257743127310,  0.32607257743127310,  0.17392742256872690]
    c =  [0.06943184420297371,  0.33000947820757190,  0.66999052179242810,  0.93056815579702630]
    o = 8

    CoefficientsRK(:glrk4, o, a, b, c)
end

function getCoefficientsGLRK5()
    a = [[0.05923172126404727  -0.01957036435907604   0.01125440081864296  -0.005593793660812185   0.001588112967865999]
         [0.12815100567004530   0.11965716762484160  -0.02459211461964220   0.010318280670683360  -0.002768994398769603]
         [0.11377628800422460   0.26000465168064150   0.14222222222222220  -0.020690316430958280   0.004687154523869941]
         [0.12123243692686410   0.22899605457899990   0.30903655906408660   0.11965716762484160   -0.009687563141950740]
         [0.11687532956022850   0.24490812891049540   0.27319004362580150   0.25888469960875930    0.05923172126404727]]
    b =  [0.11846344252809450,  0.23931433524968320,  0.28444444444444440,  0.23931433524968320,   0.11846344252809450]
    c =  [0.04691007703066800,  0.23076534494715850,  0.50000000000000000,  0.76923465505284150,   0.95308992296933200]
    o = 10

    CoefficientsRK(:glrk5, o, a, b, c)
end

function getCoefficientsGLRK6()
    a = [[0.04283112309479259  -0.01476372599719741   0.009325050706477751  -0.005668858049483512   0.002854433315099335  -0.0008127801712647621]
         [0.09267349143037886   0.09019039326203465  -0.020300102293239590   0.010363156240246420  -0.004887192928037672   0.001355561055485062]
         [0.08224792261284387   0.19603216233324500   0.11697848364317280   -0.020482527745656100   0.007989991899662336  -0.002075625784866334]
         [0.08773787197445151   0.17239079462440700   0.25443949503200160    0.11697848364317280   -0.015651375809175700   0.003414323576741299]
         [0.08430668513410011   0.18526797945210700   0.22359381104609910    0.25425706957958510    0.090190393262034650  -0.007011245240793691]
         [0.08647502636084993   0.17752635320897000   0.23962582533582900    0.22463191657986780    0.19514451252126670    0.04283112309479259]]
    b =  [0.08566224618958517,  0.18038078652406930,  0.23395696728634550,   0.23395696728634550,   0.18038078652406930,   0.08566224618958517]
    c =  [0.03376524289842399,  0.16939530676686770,  0.38069040695840150,   0.61930959304159850,   0.83060469323313230,   0.96623475710157600]
    o = 12

    CoefficientsRK(:glrk6, o, a, b, c)
end


function getCoefficientsGLRK(s::Int; high_precision=true)

    if high_precision == true
        if s == 1
            return getCoefficientsGLRK1()
        elseif s == 2
            return getCoefficientsGLRK2()
        elseif s == 3
            return getCoefficientsGLRK3()
        elseif s == 4
            return getCoefficientsGLRK4()
        elseif s == 5
            return getCoefficientsGLRK5()
        elseif s == 6
            return getCoefficientsGLRK6()
        end
    end


    function evaluate!{T}(pol::Poly{T}, x::Vector{T}, y::Vector{T})
        @assert length(x) == length(y)

        for j in 1:length(y)
            y[j] = pol(x[j])
        end
    end

    # order
    o = 2s

    # obtain Gauss-Legendre nodes and weights
    gl = gausslegendre(s)

    # scale from [-1,+1] to [0,1]
    c = (gl[1]+1)/2
    b = gl[2]/2

    # create Lagrange polynomial
    lag = LagrangePolynomial(c, ones(s))
    vdm = vandermonde_matrix_inverse(c)

    # compute monomial basis functions and corresponding integrals
    polys = []
    poly_ints = []

    for i in 1:s
        y = zeros(s)
        y[i] = 1
        mon = *(vdm, y)
        push!(polys, Poly(mon))
        push!(poly_ints, polyint(polys[i]))
    end

    # compute Runge-Kutta coefficients
    a = zeros(s,s)

    for i in 1:s
        for j in 1:s
            a[i,j] = poly_ints[j](c[i])
        end
    end

    CoefficientsRK(Symbol("glrk", s), o, a, b, c)
end
